<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个随意的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://momorz.github.io/"/>
  <updated>2020-05-01T09:13:44.869Z</updated>
  <id>https://momorz.github.io/</id>
  
  <author>
    <name>MoMorZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>编译原理第一次实验</title>
    <link href="https://momorz.github.io/2020/05/01/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C/"/>
    <id>https://momorz.github.io/2020/05/01/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C/</id>
    <published>2020-05-01T09:10:17.000Z</published>
    <updated>2020-05-01T09:13:44.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1000-DFA识别语言"><a href="#1000-DFA识别语言" class="headerlink" title="1000 DFA识别语言"></a>1000 DFA识别语言</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://soj.acmm.club/show_problem.php?pid=1000&amp;cid=2834</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">26</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">50</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">mv</span><span class="params">(MAXN, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(MAXM, <span class="number">-1</span>))</span></span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rec_state;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; mv[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; x &amp;&amp; x != <span class="number">-1</span>)</span><br><span class="line">        rec_state.emplace_back(x);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s &amp;&amp; s != <span class="string">"#"</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            state = mv[state][s[i] - <span class="string">'a'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(rec_state.<span class="built_in">begin</span>(), rec_state.<span class="built_in">end</span>(), state) != rec_state.<span class="built_in">end</span>())</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("in.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &amp;&amp; n != <span class="number">0</span>)</span><br><span class="line">        work();</span><br><span class="line">    <span class="comment">// fclose(stdin);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入文件"><a href="#输入文件" class="headerlink" title="输入文件"></a>输入文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">4 2</span><br><span class="line">1 0</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 0</span><br><span class="line">3 -1</span><br><span class="line">aaabb</span><br><span class="line">abbab</span><br><span class="line">abbaaabb</span><br><span class="line">abbb</span><br><span class="line">#</span><br><span class="line">1 3</span><br><span class="line">0 0 0</span><br><span class="line">0 -1</span><br><span class="line">cacba</span><br><span class="line">#</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><h2 id="1001-NFA识别语言"><a href="#1001-NFA识别语言" class="headerlink" title="1001 NFA识别语言"></a>1001 NFA识别语言</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://soj.acmm.club/show_problem.php?pid=1001&amp;cid=2834</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">26</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">50</span> + <span class="number">5</span>;</span><br><span class="line"><span class="comment">// vector&lt;vector&lt;set&lt;int&gt;&gt;&gt; mv(MAXN, vector&lt;set&lt;int&gt;&gt;(MAXM));</span></span><br><span class="line"><span class="comment">// vector&lt;vector&lt;set&lt;int&gt;&gt;&gt; mv(MAXN);</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; mv;</span><br><span class="line"><span class="comment">// stack&lt;int&gt; oldState, newState;</span></span><br><span class="line"><span class="comment">// vector&lt;bool&gt; alreadyOn(MAXN, 0);</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void addState(int s)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     newState.push(s);</span></span><br><span class="line"><span class="comment">//     alreadyOn[s] = 1;</span></span><br><span class="line"><span class="comment">//     for (int t : mv[s][0])</span></span><br><span class="line"><span class="comment">//         if (!alreadyOn[t])</span></span><br><span class="line"><span class="comment">//             addState(t);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void updateState(int c)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     while (!oldState.empty()) &#123;</span></span><br><span class="line"><span class="comment">//         int s = oldState.top();</span></span><br><span class="line"><span class="comment">//         for (int t : mv[s][c])</span></span><br><span class="line"><span class="comment">//             if (!alreadyOn[t])</span></span><br><span class="line"><span class="comment">//                 addState(t);</span></span><br><span class="line"><span class="comment">//         oldState.pop();</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     while (!newState.empty()) &#123;</span></span><br><span class="line"><span class="comment">//         int s = newState.top();</span></span><br><span class="line"><span class="comment">//         newState.pop();</span></span><br><span class="line"><span class="comment">//         oldState.push(s);</span></span><br><span class="line"><span class="comment">//         alreadyOn[s] = 0;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; <span class="title">move</span><span class="params">(<span class="keyword">const</span> <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&amp; states, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s : states)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> to : mv[s][c])</span><br><span class="line">            ret.insert(to);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; <span class="title">closure</span><span class="params">(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">    <span class="function"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ret</span><span class="params">(state)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : state)</span><br><span class="line">        st.push(x);</span><br><span class="line">    <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = st.top();</span><br><span class="line">        st.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u : mv[t][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ret.<span class="built_in">find</span>(u) == ret.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                ret.insert(u);</span><br><span class="line">                st.push(u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSet</span><span class="params">(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Set.size(): "</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : s)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; recState;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line">    mv.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; t;</span><br><span class="line">        mv.emplace_back(t);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            <span class="keyword">if</span> (s[<span class="number">1</span>] == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">                mv[i].emplace_back(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &#123;&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> bg = <span class="number">0</span>, pos;</span><br><span class="line">                mv[i].emplace_back(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &#123;&#125;);</span><br><span class="line">                <span class="keyword">while</span> ((pos = s.<span class="built_in">find</span>(<span class="string">','</span>, bg + <span class="number">1</span>)) != <span class="built_in">string</span>::npos) &#123;</span><br><span class="line">                    <span class="comment">// cout &lt;&lt; s.substr(bg + 1, pos - bg - 1) &lt;&lt; endl;</span></span><br><span class="line">                    <span class="comment">// printf("bg: %d pos:%d\n", bg, pos);</span></span><br><span class="line">                    <span class="keyword">int</span> x = stoi(s.substr(bg + <span class="number">1</span>, pos - bg - <span class="number">1</span>));</span><br><span class="line">                    bg = pos;</span><br><span class="line">                    mv[i][j].insert(x);</span><br><span class="line">                &#125;</span><br><span class="line">                mv[i][j].insert(stoi(s.substr(bg + <span class="number">1</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// printSet(mv[i][j]);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; n; ++i)</span></span><br><span class="line">    <span class="comment">//     for (int j = 0; j &lt; m; ++j)</span></span><br><span class="line">    <span class="comment">//         printSet(mv[i][j]);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; x &amp;&amp; x != <span class="number">-1</span>)</span><br><span class="line">        recState.insert(x);</span><br><span class="line">    <span class="comment">// printf("recState\n");</span></span><br><span class="line">    <span class="comment">// printSet(recState);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s &amp;&amp; s != <span class="string">"#"</span>) &#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; state = closure(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &#123; <span class="number">0</span> &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            state = closure(<span class="built_in">move</span>(state, s[i] - <span class="string">'a'</span> + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">        set_intersection(state.<span class="built_in">begin</span>(), state.<span class="built_in">end</span>(), recState.<span class="built_in">begin</span>(), recState.<span class="built_in">end</span>(), back_inserter(c));</span><br><span class="line">        <span class="keyword">if</span> (!c.empty())</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &amp;&amp; n != <span class="number">0</span>)</span><br><span class="line">        work();</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入文件-1"><a href="#输入文件-1" class="headerlink" title="输入文件"></a>输入文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">&#123;&#125; &#123;0,1&#125; &#123;0&#125;</span><br><span class="line">&#123;&#125; &#123;&#125; &#123;2&#125;</span><br><span class="line">&#123;&#125; &#123;&#125; &#123;3&#125;</span><br><span class="line">&#123;&#125; &#123;&#125; &#123;&#125;</span><br><span class="line">3 -1</span><br><span class="line">aaabb</span><br><span class="line">abbab</span><br><span class="line">abbaaabb</span><br><span class="line">abbb</span><br><span class="line">#</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1000-DFA识别语言&quot;&gt;&lt;a href=&quot;#1000-DFA识别语言&quot; class=&quot;headerlink&quot; title=&quot;1000 DFA识别语言&quot;&gt;&lt;/a&gt;1000 DFA识别语言&lt;/h2&gt;&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="https://momorz.github.io/2020/04/12/My-First-Post/"/>
    <id>https://momorz.github.io/2020/04/12/My-First-Post/</id>
    <published>2020-04-11T16:30:17.000Z</published>
    <updated>2020-04-11T16:32:41.433Z</updated>
    
    <content type="html"><![CDATA[<p>后面会慢慢在博客放一些技术文章以及学校各个课程的一些作业。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;后面会慢慢在博客放一些技术文章以及学校各个课程的一些作业。&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
